name: Build

on:
  push:
    branches: [ "master" ]
    paths-ignore:
      - '**.md'
      - '**/LICENSE'
  pull_request:
    paths-ignore:
      - '**.md'
      - '**/LICENSE'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: Ubuntu
            qt_ver: 6
            qt_host: linux
            qt_version: '6.8.1'
            qt_modules: 'qtserialport qtpositioning qtwebchannel qtwebengine'
          - os: windows-2022
            qt_ver: 6
            qt_host: windows
            qt_version: '6.8.1'
            qt_modules: 'qtserialport qtpositioning qtwebchannel qtwebengine'
    
    runs-on: ${{ matrix.os }}
    
    env:
      INSTALL_DIR: "install"
      INSTALL_APPIMAGE_DIR: "install-appimage"
      INSTALL_PORTABLE_DIR: "install-portable"
      BUILD_DIR: "build"
      BUILD_TYPE: Release
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          
      - name: Set up MSVC
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install NSIS
        if: runner.os == 'Windows'
        run: |
          iex "& {$(irm get.scoop.sh)} -RunAsAdmin"
          scoop bucket add extras
          scoop install nsis
          
      - name: Set environment variables
        shell: bash
        run: |
          ver_short=`git rev-parse --short HEAD`
          echo "VERSION=$ver_short" >> $GITHUB_ENV
          
      - name: Install dependencies
        if: runner.os == 'Linux'
        run: |
          sudo add-apt-repository universe
          sudo apt-get -y update
          sudo apt-get -y install extra-cmake-modules libxss-dev libwayland-dev libfuse2 libxcb-cursor0
      
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt_version }}
          host: ${{ matrix.qt_host }}
          target: 'desktop'
          modules: ${{ matrix.qt_modules }}
          cache: true
          cache-key-prefix: ${{ matrix.qt_host }}-${{ matrix.qt_version }}-"${{ matrix.qt_modules }}"-qt_cache

      - name: Prepare AppImage
        if: runner.os == 'Linux'
        run: |
          wget "https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage"
          wget "https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/releases/download/continuous/linuxdeploy-plugin-appimage-x86_64.AppImage"
          wget "https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage"
          chmod +x linuxdeploy-*.AppImage
      
      - name: Configure CMake
        run: cmake -B ${{ env.BUILD_DIR }} -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
      
      - name: Build
        run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }}
        
      - name: Package (Windows)
        if: runner.os == 'Windows'
        run: cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_DIR }} --config ${{ env.BUILD_TYPE }}

      - name: Package (Windows, portable)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_PORTABLE_DIR }} --config ${{ env.BUILD_TYPE }}
          cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_PORTABLE_DIR }} --component portable

          call "${{ env.QT_ROOT_DIR }}\bin\qtenv2.bat"
          for /f "delims=" %%d in ( 'vswhere.exe -latest -property installationPath' ) do @( call "%%d\VC\Auxiliary\Build\vcvars64.bat" )
          chdir /d %GITHUB_WORKSPACE%\${{ env.INSTALL_PORTABLE_DIR }}\bin
          windeployqt -sql -svg --exclude-plugins qsqlibase,qsqlmimer,qsqloci,qsqlodbc,qsqlpsql --no-compiler-runtime --no-system-d3d-compiler --release QtTube.exe
          copy "${{ env.QT_ROOT_DIR }}\resources\v8_context_snapshot.bin" resources\v8_context_snapshot.bin

      #- name: Package (Windows installer)
        #if: runner.os == 'Windows'
        #run: |
          #cd ${{ env.INSTALL_DIR }}
          #makensis -NOCD "${{ github.workspace }}/${{ env.BUILD_DIR }}/application/program_info/win_install.nsi"
      
      - name: Package (tarball)
        if: runner.os == 'Linux'
        run: |
          cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_DIR }}
          cd ${{ env.INSTALL_DIR }}
          tar --owner root --group root -czf ../QtTube.tar.gz *
      
      - name: Package (AppImage)
        if: runner.os == 'Linux'
        run: |
          export EXTRA_PLATFORM_PLUGINS="libqwayland-egl.so;libqwayland-generic.so"
          export EXTRA_QT_MODULES="sql;svg;waylandcompositor"
          export LDAI_OUTPUT="QtTube-${{ runner.os }}-${{ env.VERSION }}-Qt${{ matrix.qt_ver }}-${{ env.BUILD_TYPE }}-x86_64.AppImage"
          export LINUXDEPLOY_EXCLUDED_LIBRARIES="libmysqlclient.so*;libqsqlmimer.so;libqsqlmysql.so;libqsqlodbc.so;libqsqlpsql.so"
          
          cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_APPIMAGE_DIR }}/usr
          cmake --install ${{ env.BUILD_DIR }} --prefix ${{ env.INSTALL_APPIMAGE_DIR }}/usr/bin --component selfcontained
          
          mkdir -p ${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib
          mkdir -p ${{ env.INSTALL_APPIMAGE_DIR }}/usr/resources
          
          cp /usr/lib/x86_64-linux-gnu/libcrypto.so.3 ${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib
          cp /usr/lib/x86_64-linux-gnu/libssl.so.3 ${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib
          cp /usr/lib/x86_64-linux-gnu/libicu*.so.* ${{ env.INSTALL_APPIMAGE_DIR }}/usr/lib
          cp "${{ env.QT_ROOT_DIR }}/resources/v8_context_snapshot.bin" ${{ env.INSTALL_APPIMAGE_DIR }}/usr/resources
          
          ./linuxdeploy-x86_64.AppImage \
            --appdir ${{ env.INSTALL_APPIMAGE_DIR }} \
            --output appimage \
            --plugin qt \
            --custom-apprun application/program_info/AppRun \
            -d application/program_info/qttube.desktop \
            -i application/res/qttube.svg
      
      - name: Upload artifact (zip)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: QtTube-${{ runner.os }}-${{ env.VERSION }}-Qt${{ matrix.qt_ver }}-${{ env.BUILD_TYPE }}
          path: ${{ env.INSTALL_DIR }}/**

      - name: Upload artifact (zip, portable)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: QtTube-${{ runner.os }}-${{ env.VERSION }}-Qt${{ matrix.qt_ver }}-${{ env.BUILD_TYPE }}-Portable
          path: ${{ env.INSTALL_PORTABLE_DIR }}/bin/**
          
      #- name: Upload artifact (installer)
        #if: runner.os == 'Windows'
        #uses: actions/upload-artifact@v4
        #with:
          #name: QtTube-${{ runner.os }}-Setup-${{ env.VERSION }}-Qt${{ matrix.qt_ver }}-${{ env.BUILD_TYPE }}
          #path: QtTube-Setup.exe
          
      - name: Upload artifact (tarball)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: QtTube-${{ runner.os }}-${{ env.VERSION }}-Qt${{ matrix.qt_ver }}-${{ env.BUILD_TYPE }}
          path: QtTube.tar.gz
      
      - name: Upload artifact (AppImage)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: QtTube-${{ runner.os }}-${{ env.VERSION }}-Qt${{ matrix.qt_ver }}-${{ env.BUILD_TYPE }}-x86_64.AppImage
          path: QtTube-${{ runner.os }}-${{ env.VERSION }}-Qt${{ matrix.qt_ver }}-${{ env.BUILD_TYPE }}-x86_64.AppImage
